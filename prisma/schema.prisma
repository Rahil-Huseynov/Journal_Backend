// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        Int      @id @default(autoincrement())
  firstName String?
  lastName  String?
  email     String   @unique
  hash      String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique
  hash                String
  firstName           String?
  lastName            String?
  fatherName          String?
  role                String?
  usertype            String?
  organization        String?
  position            String?
  phoneCode           String?
  phoneNumber         String?
  address             String?
  fin                 String?              @unique
  idSerial            String?              @unique
  passportId          String?              @unique
  isForeignCitizen    Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  userJournal         UserJournal[]
  citizenship         String?
  passwordResetTokens PasswordResetToken[]

  @@map("users")
}

model AllJournal {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  title_az       String?
  title_en       String?
  title_ru       String?
  description_az String?
  description_en String?
  description_ru String?
  file           String
  userEmail      String
  userName       String?

  @@map("allJournal")
}

model Category {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  title_az       String?
  title_en       String?
  title_ru       String?
  description_az String?
  description_en String?
  description_ru String?
  image          String

  globalSubCategory GlobalSubCategory[]
  subCategories     SubCategory[]
  userJournal       UserJournal[]       @relation("JournalCategories")
  authors           Author[]            @relation("AuthorCategories")


  @@map("category")
}

model GlobalSubCategory {
  id             Int      @id @default(autoincrement())
  title_az       String?
  title_en       String?
  title_ru       String?
  description_az String?
  description_en String?
  description_ru String?
  file           String
  count          Int      @default(0)
  requireCount   Int      @default(0)
  categoryId     Int
  category       Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  subCategoryId Int?
  subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id], onDelete: SetNull)

  userJournals UserJournal[] @relation("JournalGlobalSubcategories")

  @@map("global_subcategory")
}

model SubCategory {
  id             Int      @id @default(autoincrement())
  title_az       String?
  title_en       String?
  title_ru       String?
  description_az String?
  description_en String?
  description_ru String?
  count          Int      @default(0)
  EndDate        String?
  status         String?
  requireCount   Int      @default(0)
  createdAt      DateTime @default(now())

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  journals            UserJournal[]       @relation("JournalSubcategories")
  globalSubCategories GlobalSubCategory[]

  @@map("subcategory")
}

model UserJournal {
  id                  Int                 @id @default(autoincrement())
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  title_az            String?
  title_en            String?
  title_ru            String?
  description_az      String?
  description_en      String?
  description_ru      String?
  keywords_en         String?
  keywords_az         String?
  keywords_ru         String?
  file                String
  userId              Int
  user                User                @relation(fields: [userId], references: [id])
  approved            Boolean             @default(false)
  status              String?
  message             String?
  order               Int                 @default(0)
  category            Category[]          @relation("JournalCategories")
  subCategories       SubCategory[]       @relation("JournalSubcategories")
  globalSubCategories GlobalSubCategory[] @relation("JournalGlobalSubcategories")
  messages            messages[]

  @@map("userJournal")
}

model PasswordResetToken {
  token     String   @id
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expires   DateTime
  createdAt DateTime @default(now())
}

model messages {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  problems  String?

  userJournalId Int
  userJournal   UserJournal @relation(fields: [userJournalId], references: [id], onDelete: Cascade)

  @@map("messages")
}


model Author {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  firstName  String?
  lastName   String?
  about      String?

  categories Category[] @relation("AuthorCategories")

  @@map("author")
}


model news {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  title_az          String?
  title_en          String?
  title_ru          String?
  description_az    String? 
  description_en    String?
  description_ru    String?
  image             String?

  @@map("news")
}
